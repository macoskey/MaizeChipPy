#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file '/cygdrive/c/Users/labuser/Desktop/bluechip/fpga-rtl/soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'onchip_memory2_0', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ONCHIP_MEMORY2_0_'.
 * The prefix is the slave descriptor.
 */
#define ONCHIP_MEMORY2_0_COMPONENT_TYPE altera_avalon_onchip_memory2
#define ONCHIP_MEMORY2_0_COMPONENT_NAME onchip_memory2_0
#define ONCHIP_MEMORY2_0_BASE 0x0
#define ONCHIP_MEMORY2_0_SPAN 65536
#define ONCHIP_MEMORY2_0_END 0xffff
#define ONCHIP_MEMORY2_0_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define ONCHIP_MEMORY2_0_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ONCHIP_MEMORY2_0_CONTENTS_INFO ""
#define ONCHIP_MEMORY2_0_DUAL_PORT 0
#define ONCHIP_MEMORY2_0_GUI_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY2_0_INIT_CONTENTS_FILE soc_system_onchip_memory2_0
#define ONCHIP_MEMORY2_0_INIT_MEM_CONTENT 1
#define ONCHIP_MEMORY2_0_INSTANCE_ID NONE
#define ONCHIP_MEMORY2_0_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ONCHIP_MEMORY2_0_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY2_0_READ_DURING_WRITE_MODE DONT_CARE
#define ONCHIP_MEMORY2_0_SINGLE_CLOCK_OP 0
#define ONCHIP_MEMORY2_0_SIZE_MULTIPLE 1
#define ONCHIP_MEMORY2_0_SIZE_VALUE 65536
#define ONCHIP_MEMORY2_0_WRITABLE 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define ONCHIP_MEMORY2_0_MEMORY_INFO_GENERATE_DAT_SYM 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_GENERATE_HEX 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_HAS_BYTE_LANE 0
#define ONCHIP_MEMORY2_0_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define ONCHIP_MEMORY2_0_MEMORY_INFO_MEM_INIT_DATA_WIDTH 64
#define ONCHIP_MEMORY2_0_MEMORY_INFO_MEM_INIT_FILENAME soc_system_onchip_memory2_0

/*
 * Macros for device 'pio_led', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_LED_'.
 * The prefix is the slave descriptor.
 */
#define PIO_LED_COMPONENT_TYPE altera_avalon_pio
#define PIO_LED_COMPONENT_NAME pio_led
#define PIO_LED_BASE 0x0
#define PIO_LED_SPAN 32
#define PIO_LED_END 0x1f
#define PIO_LED_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_LED_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_LED_CAPTURE 0
#define PIO_LED_DATA_WIDTH 8
#define PIO_LED_DO_TEST_BENCH_WIRING 0
#define PIO_LED_DRIVEN_SIM_VALUE 0
#define PIO_LED_EDGE_TYPE NONE
#define PIO_LED_FREQ 50000000
#define PIO_LED_HAS_IN 0
#define PIO_LED_HAS_OUT 1
#define PIO_LED_HAS_TRI 0
#define PIO_LED_IRQ_TYPE NONE
#define PIO_LED_RESET_VALUE 255

/*
 * Macros for device 'pio_h2f_read_addr', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_H2F_READ_ADDR_'.
 * The prefix is the slave descriptor.
 */
#define PIO_H2F_READ_ADDR_COMPONENT_TYPE altera_avalon_pio
#define PIO_H2F_READ_ADDR_COMPONENT_NAME pio_h2f_read_addr
#define PIO_H2F_READ_ADDR_BASE 0x30
#define PIO_H2F_READ_ADDR_SPAN 32
#define PIO_H2F_READ_ADDR_END 0x4f
#define PIO_H2F_READ_ADDR_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_H2F_READ_ADDR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_H2F_READ_ADDR_CAPTURE 0
#define PIO_H2F_READ_ADDR_DATA_WIDTH 13
#define PIO_H2F_READ_ADDR_DO_TEST_BENCH_WIRING 0
#define PIO_H2F_READ_ADDR_DRIVEN_SIM_VALUE 0
#define PIO_H2F_READ_ADDR_EDGE_TYPE NONE
#define PIO_H2F_READ_ADDR_FREQ 50000000
#define PIO_H2F_READ_ADDR_HAS_IN 0
#define PIO_H2F_READ_ADDR_HAS_OUT 1
#define PIO_H2F_READ_ADDR_HAS_TRI 0
#define PIO_H2F_READ_ADDR_IRQ_TYPE NONE
#define PIO_H2F_READ_ADDR_RESET_VALUE 0

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x10000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x10007
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1491342155

/*
 * Macros for device 'pio_f2h_gpio0', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_F2H_GPIO0_'.
 * The prefix is the slave descriptor.
 */
#define PIO_F2H_GPIO0_COMPONENT_TYPE altera_avalon_pio
#define PIO_F2H_GPIO0_COMPONENT_NAME pio_f2h_gpio0
#define PIO_F2H_GPIO0_BASE 0x10010
#define PIO_F2H_GPIO0_SPAN 32
#define PIO_F2H_GPIO0_END 0x1002f
#define PIO_F2H_GPIO0_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_F2H_GPIO0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_F2H_GPIO0_CAPTURE 0
#define PIO_F2H_GPIO0_DATA_WIDTH 32
#define PIO_F2H_GPIO0_DO_TEST_BENCH_WIRING 0
#define PIO_F2H_GPIO0_DRIVEN_SIM_VALUE 0
#define PIO_F2H_GPIO0_EDGE_TYPE NONE
#define PIO_F2H_GPIO0_FREQ 50000000
#define PIO_F2H_GPIO0_HAS_IN 1
#define PIO_F2H_GPIO0_HAS_OUT 0
#define PIO_F2H_GPIO0_HAS_TRI 0
#define PIO_F2H_GPIO0_IRQ_TYPE NONE
#define PIO_F2H_GPIO0_RESET_VALUE 255

/*
 * Macros for device 'pio_f2h_gpio1', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_F2H_GPIO1_'.
 * The prefix is the slave descriptor.
 */
#define PIO_F2H_GPIO1_COMPONENT_TYPE altera_avalon_pio
#define PIO_F2H_GPIO1_COMPONENT_NAME pio_f2h_gpio1
#define PIO_F2H_GPIO1_BASE 0x10030
#define PIO_F2H_GPIO1_SPAN 32
#define PIO_F2H_GPIO1_END 0x1004f
#define PIO_F2H_GPIO1_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_F2H_GPIO1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_F2H_GPIO1_CAPTURE 0
#define PIO_F2H_GPIO1_DATA_WIDTH 32
#define PIO_F2H_GPIO1_DO_TEST_BENCH_WIRING 0
#define PIO_F2H_GPIO1_DRIVEN_SIM_VALUE 0
#define PIO_F2H_GPIO1_EDGE_TYPE NONE
#define PIO_F2H_GPIO1_FREQ 50000000
#define PIO_F2H_GPIO1_HAS_IN 1
#define PIO_F2H_GPIO1_HAS_OUT 0
#define PIO_F2H_GPIO1_HAS_TRI 0
#define PIO_F2H_GPIO1_IRQ_TYPE NONE
#define PIO_F2H_GPIO1_RESET_VALUE 170

/*
 * Macros for device 'pio_h2f_record_length', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_H2F_RECORD_LENGTH_'.
 * The prefix is the slave descriptor.
 */
#define PIO_H2F_RECORD_LENGTH_COMPONENT_TYPE altera_avalon_pio
#define PIO_H2F_RECORD_LENGTH_COMPONENT_NAME pio_h2f_record_length
#define PIO_H2F_RECORD_LENGTH_BASE 0x10050
#define PIO_H2F_RECORD_LENGTH_SPAN 32
#define PIO_H2F_RECORD_LENGTH_END 0x1006f
#define PIO_H2F_RECORD_LENGTH_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_H2F_RECORD_LENGTH_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_H2F_RECORD_LENGTH_CAPTURE 0
#define PIO_H2F_RECORD_LENGTH_DATA_WIDTH 13
#define PIO_H2F_RECORD_LENGTH_DO_TEST_BENCH_WIRING 0
#define PIO_H2F_RECORD_LENGTH_DRIVEN_SIM_VALUE 0
#define PIO_H2F_RECORD_LENGTH_EDGE_TYPE NONE
#define PIO_H2F_RECORD_LENGTH_FREQ 50000000
#define PIO_H2F_RECORD_LENGTH_HAS_IN 0
#define PIO_H2F_RECORD_LENGTH_HAS_OUT 1
#define PIO_H2F_RECORD_LENGTH_HAS_TRI 0
#define PIO_H2F_RECORD_LENGTH_IRQ_TYPE NONE
#define PIO_H2F_RECORD_LENGTH_RESET_VALUE 0

/*
 * Macros for device 'pio_h2f_trig_delay', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_H2F_TRIG_DELAY_'.
 * The prefix is the slave descriptor.
 */
#define PIO_H2F_TRIG_DELAY_COMPONENT_TYPE altera_avalon_pio
#define PIO_H2F_TRIG_DELAY_COMPONENT_NAME pio_h2f_trig_delay
#define PIO_H2F_TRIG_DELAY_BASE 0x10070
#define PIO_H2F_TRIG_DELAY_SPAN 32
#define PIO_H2F_TRIG_DELAY_END 0x1008f
#define PIO_H2F_TRIG_DELAY_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_H2F_TRIG_DELAY_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_H2F_TRIG_DELAY_CAPTURE 0
#define PIO_H2F_TRIG_DELAY_DATA_WIDTH 32
#define PIO_H2F_TRIG_DELAY_DO_TEST_BENCH_WIRING 0
#define PIO_H2F_TRIG_DELAY_DRIVEN_SIM_VALUE 0
#define PIO_H2F_TRIG_DELAY_EDGE_TYPE NONE
#define PIO_H2F_TRIG_DELAY_FREQ 50000000
#define PIO_H2F_TRIG_DELAY_HAS_IN 0
#define PIO_H2F_TRIG_DELAY_HAS_OUT 1
#define PIO_H2F_TRIG_DELAY_HAS_TRI 0
#define PIO_H2F_TRIG_DELAY_IRQ_TYPE NONE
#define PIO_H2F_TRIG_DELAY_RESET_VALUE 0

/*
 * Macros for device 'pio_f2h_transmit_ready', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_F2H_TRANSMIT_READY_'.
 * The prefix is the slave descriptor.
 */
#define PIO_F2H_TRANSMIT_READY_COMPONENT_TYPE altera_avalon_pio
#define PIO_F2H_TRANSMIT_READY_COMPONENT_NAME pio_f2h_transmit_ready
#define PIO_F2H_TRANSMIT_READY_BASE 0x10110
#define PIO_F2H_TRANSMIT_READY_SPAN 32
#define PIO_F2H_TRANSMIT_READY_END 0x1012f
#define PIO_F2H_TRANSMIT_READY_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_F2H_TRANSMIT_READY_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_F2H_TRANSMIT_READY_CAPTURE 0
#define PIO_F2H_TRANSMIT_READY_DATA_WIDTH 1
#define PIO_F2H_TRANSMIT_READY_DO_TEST_BENCH_WIRING 0
#define PIO_F2H_TRANSMIT_READY_DRIVEN_SIM_VALUE 0
#define PIO_F2H_TRANSMIT_READY_EDGE_TYPE NONE
#define PIO_F2H_TRANSMIT_READY_FREQ 50000000
#define PIO_F2H_TRANSMIT_READY_HAS_IN 1
#define PIO_F2H_TRANSMIT_READY_HAS_OUT 0
#define PIO_F2H_TRANSMIT_READY_HAS_TRI 0
#define PIO_F2H_TRANSMIT_READY_IRQ_TYPE NONE
#define PIO_F2H_TRANSMIT_READY_RESET_VALUE 0

/*
 * Macros for device 'pio_h2f_fpga_state_reset', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_H2F_FPGA_STATE_RESET_'.
 * The prefix is the slave descriptor.
 */
#define PIO_H2F_FPGA_STATE_RESET_COMPONENT_TYPE altera_avalon_pio
#define PIO_H2F_FPGA_STATE_RESET_COMPONENT_NAME pio_h2f_fpga_state_reset
#define PIO_H2F_FPGA_STATE_RESET_BASE 0x10130
#define PIO_H2F_FPGA_STATE_RESET_SPAN 32
#define PIO_H2F_FPGA_STATE_RESET_END 0x1014f
#define PIO_H2F_FPGA_STATE_RESET_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_H2F_FPGA_STATE_RESET_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_H2F_FPGA_STATE_RESET_CAPTURE 0
#define PIO_H2F_FPGA_STATE_RESET_DATA_WIDTH 1
#define PIO_H2F_FPGA_STATE_RESET_DO_TEST_BENCH_WIRING 0
#define PIO_H2F_FPGA_STATE_RESET_DRIVEN_SIM_VALUE 0
#define PIO_H2F_FPGA_STATE_RESET_EDGE_TYPE NONE
#define PIO_H2F_FPGA_STATE_RESET_FREQ 50000000
#define PIO_H2F_FPGA_STATE_RESET_HAS_IN 0
#define PIO_H2F_FPGA_STATE_RESET_HAS_OUT 1
#define PIO_H2F_FPGA_STATE_RESET_HAS_TRI 0
#define PIO_H2F_FPGA_STATE_RESET_IRQ_TYPE NONE
#define PIO_H2F_FPGA_STATE_RESET_RESET_VALUE 0

/*
 * Macros for device 'pio_f2h_trig_count', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_F2H_TRIG_COUNT_'.
 * The prefix is the slave descriptor.
 */
#define PIO_F2H_TRIG_COUNT_COMPONENT_TYPE altera_avalon_pio
#define PIO_F2H_TRIG_COUNT_COMPONENT_NAME pio_f2h_trig_count
#define PIO_F2H_TRIG_COUNT_BASE 0x10150
#define PIO_F2H_TRIG_COUNT_SPAN 32
#define PIO_F2H_TRIG_COUNT_END 0x1016f
#define PIO_F2H_TRIG_COUNT_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_F2H_TRIG_COUNT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_F2H_TRIG_COUNT_CAPTURE 0
#define PIO_F2H_TRIG_COUNT_DATA_WIDTH 32
#define PIO_F2H_TRIG_COUNT_DO_TEST_BENCH_WIRING 0
#define PIO_F2H_TRIG_COUNT_DRIVEN_SIM_VALUE 0
#define PIO_F2H_TRIG_COUNT_EDGE_TYPE NONE
#define PIO_F2H_TRIG_COUNT_FREQ 50000000
#define PIO_F2H_TRIG_COUNT_HAS_IN 1
#define PIO_F2H_TRIG_COUNT_HAS_OUT 0
#define PIO_F2H_TRIG_COUNT_HAS_TRI 0
#define PIO_F2H_TRIG_COUNT_IRQ_TYPE NONE
#define PIO_F2H_TRIG_COUNT_RESET_VALUE 0

/*
 * Macros for device 'pio_f2h_fpga_state', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_F2H_FPGA_STATE_'.
 * The prefix is the slave descriptor.
 */
#define PIO_F2H_FPGA_STATE_COMPONENT_TYPE altera_avalon_pio
#define PIO_F2H_FPGA_STATE_COMPONENT_NAME pio_f2h_fpga_state
#define PIO_F2H_FPGA_STATE_BASE 0x10170
#define PIO_F2H_FPGA_STATE_SPAN 32
#define PIO_F2H_FPGA_STATE_END 0x1018f
#define PIO_F2H_FPGA_STATE_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_F2H_FPGA_STATE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_F2H_FPGA_STATE_CAPTURE 0
#define PIO_F2H_FPGA_STATE_DATA_WIDTH 2
#define PIO_F2H_FPGA_STATE_DO_TEST_BENCH_WIRING 0
#define PIO_F2H_FPGA_STATE_DRIVEN_SIM_VALUE 0
#define PIO_F2H_FPGA_STATE_EDGE_TYPE NONE
#define PIO_F2H_FPGA_STATE_FREQ 50000000
#define PIO_F2H_FPGA_STATE_HAS_IN 1
#define PIO_F2H_FPGA_STATE_HAS_OUT 0
#define PIO_F2H_FPGA_STATE_HAS_TRI 0
#define PIO_F2H_FPGA_STATE_IRQ_TYPE NONE
#define PIO_F2H_FPGA_STATE_RESET_VALUE 0

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x20000
#define JTAG_UART_SPAN 16
#define JTAG_UART_END 0x2000f
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8


#endif /* _ALTERA_HPS_0_H_ */
